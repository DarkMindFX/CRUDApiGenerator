<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>

<#
var pks = modelHelper.GetPKColumns(table);
var tableNamePlural = modelHelper.Pluralize( table.Name );
#>

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using PPT.Services.Dal;
using PPT.Utils.Convertors;
using System.Net;
using PPT.Functions.Common;

namespace PPT.Functions.<#= table.Name #>.V1
{
    public class GetDetails : FunctionBase
    {
        private readonly I<#= table.Name #>Dal _dal<#= table.Name #>;

        public GetDetails(IHttpContextAccessor httpContextAccessor, I<#= table.Name #>Dal dal<#= table.Name #>) : base(httpContextAccessor)
        {
            _dal<#= table.Name #> = dal<#= table.Name #>;
        }

        [Authorize]    
        [FunctionName("<#= tableNamePlural #>GetDetails")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "v1/<#= tableNamePlural.ToLower() #>/{id}")] HttpRequest req,
            <#
            
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
            #>
                <#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #>
            <#}#>,
            ILogger log)
        {
            IActionResult result = null;
            var funHelper = new PPT.Functions.Common.FunctionHelper();
            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Started");

            try
            {
                var e = _dal<#= table.Name #>.Get(id);
                if (e != null)
                {
                    var dtos = <#= table.Name #>Convertor.Convert(e, null);

                    result = new OkObjectResult(funHelper.ToJosn(dtos));
                }
                else
                {
                    result = new ObjectResult(funHelper.ToJosn(new PPT.DTO.Error()
                    {
                        Code = (int)HttpStatusCode.NotFound,
                        Message = $"<#= table.Name #> was found, but item was not deleted [ids:{<#
                                            for(int i = 0; i < pks.Count; ++i)
                                            {
                                            var pk = pks[i];
                                        #>
                                        <#= pk.Name.ToLower() #>
                                        <#= i+1 < pks.Count ? "}, {" : "}" #><# } #>]"
                    }))
                    {
                        StatusCode = (int)HttpStatusCode.NotFound
                    };
                }
            }
            catch (Exception ex)
            {
                log.LogError(ex.ToString());
            }

            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Ended");

            return result;
        }
    }
}