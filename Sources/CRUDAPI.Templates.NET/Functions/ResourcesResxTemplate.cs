// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CRUDAPI.Template.NET.Functions
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\CRUDApiGenerator\Sources\CRUDAPI.Templates.NET\Functions\ResourcesResxTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ResourcesResxTemplate : ResourcesResxTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<root>\r\n\t<!-- \r\n\t\tMicrosoft ResX Schema" +
                    "\r\n\r\n\t\tVersion 1.3\r\n\r\n\t\tThe primary goals of this format is to allow a simple XML" +
                    " format \r\n\t\tthat is mostly human readable. The generation and parsing of the \r\n\t" +
                    "\tvarious data types are done through the TypeConverter classes \r\n\t\tassociated wi" +
                    "th the data types.\r\n\r\n\t\tExample:\r\n\r\n\t\t... ado.net/XML headers & schema ...\r\n\t\t<r" +
                    "esheader name=\"resmimetype\">text/microsoft-resx</resheader>\r\n\t\t<resheader name=\"" +
                    "version\">1.3</resheader>\r\n\t\t<resheader name=\"reader\">System.Resources.ResXResour" +
                    "ceReader, System.Windows.Forms, ...</resheader>\r\n\t\t<resheader name=\"writer\">Syst" +
                    "em.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>\r\n\t\t<data " +
                    "name=\"Name1\">this is my long string</data>\r\n\t\t<data name=\"Color1\" type=\"System.D" +
                    "rawing.Color, System.Drawing\">Blue</data>\r\n\t\t<data name=\"Bitmap1\" mimetype=\"appl" +
                    "ication/x-microsoft.net.object.binary.base64\">\r\n\t\t\t[base64 mime encoded serializ" +
                    "ed .NET Framework object]\r\n\t\t</data>\r\n\t\t<data name=\"Icon1\" type=\"System.Drawing." +
                    "Icon, System.Drawing\" mimetype=\"application/x-microsoft.net.object.bytearray.bas" +
                    "e64\">\r\n\t\t\t[base64 mime encoded string representing a byte array form of the .NET" +
                    " Framework object]\r\n\t\t</data>\r\n\r\n\t\tThere are any number of \"resheader\" rows that" +
                    " contain simple \r\n\t\tname/value pairs.\r\n\r\n\t\tEach data row contains a name, and va" +
                    "lue. The row also contains a \r\n\t\ttype or mimetype. Type corresponds to a .NET cl" +
                    "ass that support \r\n\t\ttext/value conversion through the TypeConverter architectur" +
                    "e. \r\n\t\tClasses that don\'t support this are serialized and stored with the \r\n\t\tmi" +
                    "metype set.\r\n\r\n\t\tThe mimetype is used for serialized objects, and tells the \r\n\t\t" +
                    "ResXResourceReader how to depersist the object. This is currently not \r\n\t\textens" +
                    "ible. For a given mimetype the value must be set accordingly:\r\n\r\n\t\tNote - applic" +
                    "ation/x-microsoft.net.object.binary.base64 is the format \r\n\t\tthat the ResXResour" +
                    "ceWriter will generate, however the reader can \r\n\t\tread any of the formats liste" +
                    "d below.\r\n\r\n\t\tmimetype: application/x-microsoft.net.object.binary.base64\r\n\t\tvalu" +
                    "e   : The object must be serialized with \r\n\t\t\t: System.Serialization.Formatters." +
                    "Binary.BinaryFormatter\r\n\t\t\t: and then encoded with base64 encoding.\r\n\r\n\t\tmimetyp" +
                    "e: application/x-microsoft.net.object.soap.base64\r\n\t\tvalue   : The object must b" +
                    "e serialized with \r\n\t\t\t: System.Runtime.Serialization.Formatters.Soap.SoapFormat" +
                    "ter\r\n\t\t\t: and then encoded with base64 encoding.\r\n\r\n\t\tmimetype: application/x-mi" +
                    "crosoft.net.object.bytearray.base64\r\n\t\tvalue   : The object must be serialized i" +
                    "nto a byte array \r\n\t\t\t: using a System.ComponentModel.TypeConverter\r\n\t\t\t: and th" +
                    "en encoded with base64 encoding.\r\n\t-->\r\n\t\r\n\t<xsd:schema id=\"root\" xmlns=\"\" xmlns" +
                    ":xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:" +
                    "xml-msdata\">\r\n\t\t<xsd:element name=\"root\" msdata:IsDataSet=\"true\">\r\n\t\t\t<xsd:compl" +
                    "exType>\r\n\t\t\t\t<xsd:choice maxOccurs=\"unbounded\">\r\n\t\t\t\t\t<xsd:element name=\"data\">\r" +
                    "\n\t\t\t\t\t\t<xsd:complexType>\r\n\t\t\t\t\t\t\t<xsd:sequence>\r\n\t\t\t\t\t\t\t\t<xsd:element name=\"valu" +
                    "e\" type=\"xsd:string\" minOccurs=\"0\" msdata:Ordinal=\"1\" />\r\n\t\t\t\t\t\t\t\t<xsd:element n" +
                    "ame=\"comment\" type=\"xsd:string\" minOccurs=\"0\" msdata:Ordinal=\"2\" />\r\n\t\t\t\t\t\t\t</xs" +
                    "d:sequence>\r\n\t\t\t\t\t\t\t<xsd:attribute name=\"name\" type=\"xsd:string\" msdata:Ordinal=" +
                    "\"1\" />\r\n\t\t\t\t\t\t\t<xsd:attribute name=\"type\" type=\"xsd:string\" msdata:Ordinal=\"3\" /" +
                    ">\r\n\t\t\t\t\t\t\t<xsd:attribute name=\"mimetype\" type=\"xsd:string\" msdata:Ordinal=\"4\" />" +
                    "\r\n\t\t\t\t\t\t</xsd:complexType>\r\n\t\t\t\t\t</xsd:element>\r\n\t\t\t\t\t<xsd:element name=\"reshead" +
                    "er\">\r\n\t\t\t\t\t\t<xsd:complexType>\r\n\t\t\t\t\t\t\t<xsd:sequence>\r\n\t\t\t\t\t\t\t\t<xsd:element name=" +
                    "\"value\" type=\"xsd:string\" minOccurs=\"0\" msdata:Ordinal=\"1\" />\r\n\t\t\t\t\t\t\t</xsd:sequ" +
                    "ence>\r\n\t\t\t\t\t\t\t<xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\" />\r\n\t\t" +
                    "\t\t\t\t</xsd:complexType>\r\n\t\t\t\t\t</xsd:element>\r\n\t\t\t\t</xsd:choice>\r\n\t\t\t</xsd:complex" +
                    "Type>\r\n\t\t</xsd:element>\r\n\t</xsd:schema>\r\n\t<resheader name=\"resmimetype\">\r\n\t\t<val" +
                    "ue>text/microsoft-resx</value>\r\n\t</resheader>\r\n\t<resheader name=\"version\">\r\n\t\t<v" +
                    "alue>1.3</value>\r\n\t</resheader>\r\n\t<resheader name=\"reader\">\r\n\t\t<value>System.Res" +
                    "ources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neu" +
                    "tral, PublicKeyToken=b77a5c561934e089</value>\r\n\t</resheader>\r\n\t<resheader name=\"" +
                    "writer\">\r\n\t\t<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Ve" +
                    "rsion=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\r\n\t</r" +
                    "esheader>\r\n</root>");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Projects\CRUDApiGenerator\Sources\CRUDAPI.Templates.NET\Functions\ResourcesResxTemplate.tt"

private global::CRUDAPI.DataModel.DataTable _tableField;

/// <summary>
/// Access the table parameter of the template.
/// </summary>
private global::CRUDAPI.DataModel.DataTable table
{
    get
    {
        return this._tableField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool tableValueAcquired = false;
if (this.Session.ContainsKey("table"))
{
    this._tableField = ((global::CRUDAPI.DataModel.DataTable)(this.Session["table"]));
    tableValueAcquired = true;
}
if ((tableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("table");
    if ((data != null))
    {
        this._tableField = ((global::CRUDAPI.DataModel.DataTable)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ResourcesResxTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
