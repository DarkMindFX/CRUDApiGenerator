<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ parameter name="RootNamespace" type="System.String" #>
<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>

<#
var pks = modelHelper.GetPKColumns(table);
var tableNamePlural = modelHelper.Pluralize( table.Name );
#>

using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using <#= RootNamespace #>.Utils.Convertors;
using <#= RootNamespace #>.Services.Common.Helpers;
using <#= RootNamespace #>.Services.Dal;
using System.Net;
using <#= RootNamespace #>.Functions.Common;

namespace <#=RootNamespace #>.Functions.<#= table.Name #>.V1
{
    public class Insert : FunctionBase
    {
        private readonly I<#= table.Name #>Dal _dal<#= table.Name #>;

        public Insert(IHttpContextAccessor httpContextAccessor, I<#= table.Name #>Dal dal<#= table.Name #>) : base(httpContextAccessor)
        {
            _dal<#= table.Name #> = dal<#= table.Name #>;
        }

        [Authorize]
        [FunctionName("<#= tableNamePlural #>Insert")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "v1/<#= tableNamePlural.ToLower() #>")] HttpRequest req,
            ILogger log)
        {
            IActionResult result = null;
            var funHelper = new PPT.Functions.Common.FunctionHelper();
            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Started");

            try
            {
                var content = await new StreamReader(req.Body).ReadToEndAsync();

                var dto = JsonConvert.DeserializeObject<PPT.DTO.<#= table.Name #>>(content);

                var entity = <#= table.Name #>Convertor.Convert(dto);

				<#
                if(table.HasColumn("CreatedDate") || table.HasColumn("CreatedByID"))
                {
				#>
				funHelper.SetCreatedModifiedProperties(entity, 
										<#= table.HasColumn("CreatedDate") ? "\"CreatedDate\"" : "null" #>, 
										<#= table.HasColumn("CreatedByID") ? "\"CreatedByID\"" : "null" #>,
										(PPT.Interfaces.Entities.User)req.HttpContext.Items["User"]); 
				<#
					}
				#>

                PPT.Interfaces.Entities.<#= table.Name #> newEntity = _dal<#= table.Name #>.Insert(entity);

                if (newEntity != null)
                {
                    result = new ObjectResult(funHelper.ToJosn(<#= table.Name #>Convertor.Convert(newEntity, null)))
                    {
                        StatusCode = (int)HttpStatusCode.Created
                    };
                }
                else
                {
                    result = new ObjectResult(funHelper.ToJosn(new PPT.DTO.Error()
                    {
                        Code = (int)HttpStatusCode.InternalServerError,
                        Message = $"Something went wrong. <#= table.Name #> was not inserted."
                    }))
                    {
                        StatusCode = (int)HttpStatusCode.InternalServerError
                    };
                }
            }
            catch (Exception ex)
            {
                log.LogError(ex.ToString());
            }

            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Ended");

            return result;
        }
    }
}