<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="RootNamespace" type="System.String" #>
<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>
<#
var pks = modelHelper.GetPKColumns(table);
var tableNamePlural = modelHelper.Pluralize( table.Name );
#>
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using <#= RootNamespace #>.Services.Dal;
using System.Net;
using <#= RootNamespace #>.Functions.Common;

namespace <#=RootNamespace #>.Functions.<#= table.Name #>.V1
{
    public class Delete : FunctionBase
    {
        private readonly I<#= table.Name #>Dal _dal<#= table.Name #>;

        public Delete(IHttpContextAccessor httpContextAccessor, I<#= table.Name #>Dal dal<#= table.Name #>) : base(httpContextAccessor)
        {
            _dal<#= table.Name #> = dal<#= table.Name #>;
        }

        [Authorize]
        [FunctionName("<#= tableNamePlural #>Delete")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = "v1/<#= tableNamePlural.ToLower() #>/{<#for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
            #><#=pk.Name.ToLower() #><#= i+1 < pks.Count ? "}/{" : string.Empty #><#}#>}")] HttpRequest req,
            <#
            
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
            #><#= modelHelper.DbTypeToType(pk) #> <#=pk.Name.ToLower() #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>,
            ILogger log)
        {
            IActionResult result = null;
            var funHelper = new <#=RootNamespace #>.Functions.Common.FunctionHelper();
            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Started");

            try
            {
                var user = _dal<#= table.Name #>.Get(<#for(int i = 0; i < pks.Count; ++i)
					{
					var pk = pks[i];
					#><#=pk.Name.ToLower() #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);
                if (user != null)
                {
                    bool isRemoved = _dal<#= table.Name #>.Delete(<#for(int i = 0; i < pks.Count; ++i)
					{
					var pk = pks[i];
					#><#=pk.Name.ToLower() #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);

                    if (isRemoved)
                    {
                        result = new OkResult();
                    }
                    else
                    {
                        result = new ObjectResult(funHelper.ToJosn(new <#=RootNamespace #>.DTO.Error()
                        {
                            Code = (int)HttpStatusCode.InternalServerError,
                            Message = $"<#= table.Name #> was found, but item was not deleted [ids:{<#for(int i = 0; i < pks.Count; ++i)
                                            {
                                            var pk = pks[i];
                                        #><#=pk.Name.ToLower() #><#= i+1 < pks.Count ? "}, {" : "}" #><# } #>]"
                        }))
                        {
                            StatusCode = (int)HttpStatusCode.InternalServerError
                        };
                    }
                }
                else
                {
                    result = new ObjectResult(funHelper.ToJosn(new <#=RootNamespace #>.DTO.Error()
                    {
                        Code = (int)HttpStatusCode.NotFound,
                        Message = $"<#= table.Name #> was not found [ids:{<#for(int i = 0; i < pks.Count; ++i)
                                        {
                                        var pk = pks[i];#><#=pk.Name.ToLower() #><#= i+1 < pks.Count ? "}, {" : "}" #><# } #>]"
                    }))
                    {
                        StatusCode = (int)HttpStatusCode.NotFound
                    };
                }
            }
            catch (Exception ex)
            {
                log.LogError(ex.ToString());
            }

            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Ended");

            return result;
        }
    }
}
