<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="RootNamespace" type="System.String" #>
<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>
<#
var pks = modelHelper.GetPKColumns(table);
var tableNamePlural = modelHelper.Pluralize( table.Name );
#>
using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using <#= RootNamespace #>.Utils.Convertors;
using System.Net;
using <#= RootNamespace #>.Services.Dal;
using <#= RootNamespace #>.Services.Common.Helpers;
using <#= RootNamespace #>.Functions.Common;

namespace <#=RootNamespace #>.Functions.<#= table.Name #>.V1
{
    public class Update : FunctionBase
    {
        private readonly I<#= table.Name #>Dal _dal<#= table.Name #>;

        public Update(IHttpContextAccessor httpContextAccessor,
            I<#= table.Name #>Dal dal<#= table.Name #>) : base(httpContextAccessor)
        {
            _dal<#= table.Name #> = dal<#= table.Name #>;
        }

        [Authorize]
        [FunctionName("<#= tableNamePlural #>Update")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "put", Route = "v1/<#= tableNamePlural.ToLower() #>")] HttpRequest req,
            ILogger log)
        {
            IActionResult result = null;
            var funHelper = new <#=RootNamespace #>.Functions.Common.FunctionHelper();
            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Started");

            try
            {
                var content = await new StreamReader(req.Body).ReadToEndAsync();

                var dto = JsonConvert.DeserializeObject<<#=RootNamespace #>.DTO.<#= table.Name #>>(content);

                var newEntity = <#= table.Name #>Convertor.Convert(dto);

                var existingEntity = _dal<#= table.Name #>.Get(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
        newEntity.<#=pk.Name #> <#= i+1 < pks.Count ? "," : string.Empty #><#}#>);

                if (existingEntity != null)
                {
                    <#
						if(table.HasColumn("CreatedDate"))
						{
					#>
					newEntity.CreatedDate = existingEntity.CreatedDate; 
					<#
						}
					#>
					<#
						if(table.HasColumn("CreatedByID"))
						{
					#>
					newEntity.CreatedByID = existingEntity.CreatedByID; 
					<#
						}
					#>
					<#
						if(table.HasColumn("ModifiedDate") || table.HasColumn("ModifiedByID"))
						{
                    
					#>

					funHelper.SetCreatedModifiedProperties(newEntity, 
											<#= table.HasColumn("ModifiedDate") ? "\"ModifiedDate\"" : "null" #>, 
											<#= table.HasColumn("ModifiedByID") ? "\"ModifiedByID\"" : "null" #>,
											(<#=RootNamespace #>.Interfaces.Entities.User)req.HttpContext.Items["User"]); 
					<#
						}
					#>
                   
                    <#=RootNamespace #>.Interfaces.Entities.<#= table.Name #> entity = _dal<#= table.Name #>.Update(newEntity);

                    result = new ObjectResult(funHelper.ToJosn(<#= table.Name #>Convertor.Convert(newEntity, null)))
                    {
                        StatusCode = (int)HttpStatusCode.OK
                    };
                }
                else
                {
                    result = new ObjectResult(funHelper.ToJosn(new <#=RootNamespace #>.DTO.Error()
                    {
                        Code = (int)HttpStatusCode.NotFound,
                        Message = $"<#= table.Name #> was not found [ids:{<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>newEntity.<#=pk.Name #> <#= i+1 < pks.Count ? "},{" : "}" #><#}#>]"}
                    ))
                    {
                        StatusCode = (int)HttpStatusCode.NotFound
                    };
                }


            }
            catch (Exception ex)
            {
                log.LogError(ex.ToString());
            }

            log.LogInformation($"{System.Reflection.MethodInfo.GetCurrentMethod()} Ended");

            return result;
        }
    }
}
