<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ parameter name="RootNamespace" type="System.String" #>
<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>
<#@ parameter name="projectName" type="System.String" #>
<#@ parameter name="IsSoftDelete" type="System.Boolean" #>
<#@ parameter name="SoftDeleteField" type="System.String" #>

<#
var pks = modelHelper.GetPKColumns(table);
#>

using <#= RootNamespace #>.DAL.EF.Models;
using <#= RootNamespace #>.Interfaces;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;

namespace <#=RootNamespace #>.DAL.EF.Dals
{
    class <#= table.Name #>DalInitParams : InitParamsImpl
    {
    }

    [Export("EF", typeof(I<#= table.Name #>Dal))]
    public class <#= table.Name #>Dal : I<#= table.Name #>Dal
    {
        <#= projectName #>Context dbContext;

        public IInitParams CreateInitParams()
        {
            return new <#= table.Name #>DalInitParams();
        }

        public bool Delete(<#
            
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
<#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>)
        {
            var entity = dbContext.<#= modelHelper.Pluralize( table.Name ) #>.Find(ID);
            if (entity != null)
            {
                entity.IsDeleted = true;
                dbContext.SaveChanges();
                return true;
            }
            else
            {
                return false;
            }
        }

<#
    if(IsSoftDelete && table.HasColumn(SoftDeleteField))
    {
#>
        public bool Erase(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
<#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>)
        {
            var entity = dbContext.<#= modelHelper.Pluralize( table.Name ) #>.Where( e => <#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
        e.<#=pk.Name #> = <#=pk.Name #>  <#= i+1 < pks.Count ? "&&" : string.Empty #><#}#>).FirstOrDefault();
            if (entity != null)
            {
                var entityEntry = dbContext.Remove<Models.<#= table.Name #>>(entity);
                dbContext.SaveChanges();
                return true;
            }
            else
            {
                return false;
            }
        }
<#
    }
#>

        public <#=RootNamespace #>.Interfaces.Entities.<#= table.Name #> Get(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
<#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>)
        {
            <#=RootNamespace #>.Interfaces.Entities.<#= table.Name #> result = null;
            var entity = dbContext.<#= modelHelper.Pluralize(table.Name) #>.Where(e => <#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
        e.<#=pk.Name #> = <#=pk.Name #>  <#= i+1 < pks.Count ? "&&" : string.Empty #><#}#>).FirstOrDefault();
            if (entity != null)
            {
                result = Convertors.<#= table.Name #>Convertor.FromEFEntity(entity);
            }
            return result;
        }

        public IList<<#=RootNamespace #>.Interfaces.Entities.<#= table.Name #>> GetAll()
        {
            var entities = dbContext.<#= modelHelper.Pluralize(table.Name) #>.ToList();

            IList<<#=RootNamespace #>.Interfaces.Entities.<#= table.Name #>> result = ToList(entities);
            
            return result;
        }

        <#
        foreach(var c in table.Columns)
        {
                if(!string.IsNullOrEmpty(c.FKRefTable))
                {
        #>
        public IList<<#=table.Name #>> GetBy<#=c.Name #>(<#= modelHelper.DbTypeToType(c) #> <#=c.Name #>)
        {
            var entities = dbContext.<#= modelHelper.Pluralize(table.Name) #>.Where(e => e.<#=c.Name #> == <#=c.Name #>).ToList();

            IList<<#=RootNamespace #>.Interfaces.Entities.Address> result = ToList(entities);

            return result;
        }
        <#
                }
        }
        #>
        

        public void Init(IInitParams initParams)
        {
            dbContext = new <#= projectName #>Context(initParams.Parameters["ConnectionString"]);
        }

        public <#=RootNamespace #>.Interfaces.Entities.Address Insert(<#=RootNamespace #>.Interfaces.Entities.Address entity)
        {
            <#=RootNamespace #>.Interfaces.Entities.Address result = null;
            var efEntity = Convertors.AddressConvertor.ToEFEntity(entity);
            var efEntityEntry = dbContext.Add<<#=RootNamespace #>.DAL.EF.Models.Address>(efEntity);
            dbContext.SaveChanges();

            result = Convertors.AddressConvertor.FromEFEntity(efEntityEntry.Entity);

            return result;
        }

        public <#=RootNamespace #>.Interfaces.Entities.Address Update(<#=RootNamespace #>.Interfaces.Entities.Address entity)
        {
            <#=RootNamespace #>.Interfaces.Entities.Address result = null;
            var efEntity = dbContext.Addresses.Where(e => <#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #>
        e.<#=pk.Name #> = <#=pk.Name #>  <#= i+1 < pks.Count ? "&&" : string.Empty #><#}#>).FirstOrDefault();
            if (efEntity != null)
            {
                efEntity.AddressTypeID = entity.AddressTypeID;

                efEntity.Title = entity.Title;

                efEntity.CityID = entity.CityID;

                efEntity.Street = entity.Street;

                efEntity.BuildingNo = entity.BuildingNo;

                efEntity.ApartmentNo = entity.ApartmentNo;

                efEntity.Comment = entity.Comment;

                efEntity.CreatedByID = entity.CreatedByID;

                efEntity.CreatedDate = entity.CreatedDate;

                efEntity.ModifiedByID = entity.ModifiedByID;

                efEntity.ModifiedDate = entity.ModifiedDate;

                efEntity.IsDeleted = entity.IsDeleted;

                dbContext.SaveChanges();

                efEntity = dbContext.Addresses.Where(e => e.ID == entity.ID).FirstOrDefault();
                result = Convertors.AddressConvertor.FromEFEntity(efEntity);
            }
            return result;
        }

        #region Support methods
        IList<<#=RootNamespace #>.Interfaces.Entities.Address> ToList(IList<<#=RootNamespace #>.DAL.EF.Models.Address> entities)
        {
            IList<<#=RootNamespace #>.Interfaces.Entities.Address> result = new List<<#=RootNamespace #>.Interfaces.Entities.Address>();
            if (entities != null)
            {
                foreach (var e in entities)
                {
                    result.Add(Convertors.AddressConvertor.FromEFEntity(e));
                }
            }
            return result;
        }
        
        #endregion
    }
}