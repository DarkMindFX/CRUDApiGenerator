<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>
<#@ parameter name="IsSoftDelete" type="System.Boolean" #>
<#@ parameter name="SoftDeleteField" type="System.String" #>


using PPT.Interfaces.Entities;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;

namespace PPT.PhotoPrint.API.Dal
{
    [Export(typeof(I<#= table.Name #>Dal))]
    public class <#= table.Name #>Dal : DalBaseImpl<<#= table.Name #>, Interfaces.I<#= table.Name #>Dal>, I<#= table.Name #>Dal
    {

        public <#= table.Name #>Dal(Interfaces.I<#= table.Name #>Dal dalImpl) : base(dalImpl)
        {
        }

        public <#= table.Name #> Get(<#
            var pks = modelHelper.GetPKColumns(table);
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #><#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><# } #>)
        {
            return _dalImpl.Get(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i]; #>
            <#= pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><#}#>);
        }

        public bool Delete(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #><#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><# } #>)
        {
            return _dalImpl.Delete(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i]; #>
            <#= pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><# } #>);
        }

<#
    if(IsSoftDelete && table.HasColumn(SoftDeleteField))
    {
#>
        public bool Erase(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i];
        #><#= modelHelper.DbTypeToType(pk) #> <#=pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><# } #>)
        {
            return _dalImpl.Delete(<#
            for(int i = 0; i < pks.Count; ++i)
            {
            var pk = pks[i]; #>
            <#= pk.Name #><#= i+1 < pks.Count ? "," : string.Empty #><# } #>);
        }
<#
    }
#>

        <#
        foreach(var c in table.Columns)
        {
            if(!string.IsNullOrEmpty(c.FKRefTable))
            {
        #>public IList<<#= table.Name #>> GetBy<#= c.Name #>(<#= modelHelper.DbTypeToType(c) #> <#= c.Name #>)
        {
            return _dalImpl.GetBy<#= c.Name #>(<#= c.Name #>);
        }
        <#
            }
        }
        #>
    }
}
