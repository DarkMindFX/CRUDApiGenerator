<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".sql"#>

<#@ parameter name="RootNamespace" type="System.String" #>
<#@ parameter name="table" type="CRUDAPI.DataModel.DataTable" #>
<#@ parameter name="modelHelper" type="CRUDAPI.DataModel.ModelHelper" #>

<#@ parameter name="testValsUpdateBefore" type="System.Collections.Generic.IDictionary<string,object>" #>
<#@ parameter name="testValsUpdateAfter" type="System.Collections.Generic.IDictionary<string,object>" #>

-- original values --
<#
	foreach(var c in table.Columns)
	{
		string val = string.Empty;

		if (!c.IsIdentity && testValsUpdateBefore.ContainsKey(c.Name))
        {
			Type columnType = modelHelper.GetColumnType(c);
            if (testValsUpdateBefore[c.Name] != null)
            {
				if(columnType == typeof(bool))
				{
					val = (bool)testValsUpdateBefore[c.Name] ? "1" : "0";
				}
				else 
				{
					string quote = string.Empty;
					if(columnType == typeof(string) || columnType == typeof(DateTime))
					{
						quote = "'";
					}
					val = quote + testValsUpdateBefore[c.Name].ToString() + quote;
				}
			}
            else
			{
				val = "NULL";
			}
        }
		else
		{
			val = "NULL";
		}
#>
<#= modelHelper.GenerateVariableDeclaration(c) #> = <#= val #>
<#
	}
#> 
-- updated values --

<#
	foreach(var c in table.Columns)
	{
		string val = string.Empty;

		if (!c.IsIdentity && testValsUpdateAfter.ContainsKey(c.Name))
        {
			Type columnType = modelHelper.GetColumnType(c);
            if (testValsUpdateAfter[c.Name] != null)
            {
				if(columnType == typeof(bool))
				{
					val = (bool)testValsUpdateAfter[c.Name] ? "1" : "0";
				}
				else 
				{
					string quote = string.Empty;
					if(columnType == typeof(string) || columnType == typeof(DateTime))
					{
						quote = "'";
					}
					val = quote + testValsUpdateAfter[c.Name].ToString() + quote;
				}
			}
            else
			{
				val = "NULL";
			}
        }
		else
		{
			val = "NULL";
		}
#>
<#= modelHelper.GenerateVariableDeclaration(c, "upd") #> = <#= val #>
<#
	}
#> 

DECLARE @Fail AS BIT = 0

IF(NOT EXISTS(SELECT 1 FROM 
				[dbo].[<#= table.Name #>]
				WHERE 
<#
	for(int i = 0; i < table.Columns.Count; ++i) 
	{
		var c = table.Columns[i];
		if(!c.IsIdentity)
		{
#>
	(CASE WHEN @upd<#= c.Name #> IS NOT NULL THEN (CASE WHEN [<#= c.Name #>] = @upd<#= c.Name #> THEN 1 ELSE 0 END) ELSE 1 END) = 1 <#= i + 1 < table.Columns.Count ? "AND" : string.Empty #>
<#
		}
	}
#> ))
					
BEGIN

DELETE FROM 
	[dbo].[<#= table.Name #>]
	WHERE 
<#
	for(int i = 0; i < table.Columns.Count; ++i) 
	{
		var c = table.Columns[i];
		if(!c.IsIdentity)
		{
#>
	(CASE WHEN @<#= c.Name #> IS NOT NULL THEN (CASE WHEN [<#= c.Name #>] = @<#= c.Name #> THEN 1 ELSE 0 END) ELSE 1 END) = 1 <#= i + 1 < table.Columns.Count ? "AND" : string.Empty #>
<#
		}
	}
#>

	SET @Fail = 1
END
ELSE
BEGIN
DELETE FROM 
	[dbo].[<#= table.Name #>]
	WHERE 
<#
	for(int i = 0; i < table.Columns.Count; ++i) 
	{
		var c = table.Columns[i];
		if(!c.IsIdentity)
		{
#>
	(CASE WHEN @upd<#= c.Name #> IS NOT NULL THEN (CASE WHEN [<#= c.Name #>] = @upd<#= c.Name #> THEN 1 ELSE 0 END) ELSE 1 END) = 1 <#= i + 1 < table.Columns.Count ? "AND" : string.Empty #>
<#
		}
	}
#>
END


IF(@Fail = 1) 
BEGIN
	THROW 51001, '<#= table.Name #> was not updated', 1
END